version: '3'

vars:
  DIST_DIR: dist
  REPORTS_DIR: reports
  DRIVERS_DIR: drivers
  BIN_DIR: bin
  BINARY_DIR: 'bin/runix'
  ROOT_DIR: '{{.PWD}}'
  SCENARIO_DIR: tests/scenarios
  LOG_DIR: logs
  SCREENSHOT_DIR: screenshots

tasks:
  default:
    desc: "Default task: Runs the full quickstart process (setup, build-all, verify-drivers, run example)."
    cmds:
      - task: quickstart

  # Build tasks
  build:
    desc: Build the Runix project
    cmds:
      - npm run build
      - cmd: powershell -Command "if (Test-Path .env) { Copy-Item .env {{.DIST_DIR}}/ -Force }"
        platforms: [windows]
      - cmd: if [ -f .env ]; then cp .env {{.DIST_DIR}}/; fi
        platforms: [darwin, linux]
    sources:
      - src/**/*.ts
    generates:
      - "{{.DIST_DIR}}/**/*.js"

  clean:
    desc: Clean build artifacts
    cmds:
      - cmd: powershell -Command "if (Test-Path {{.DIST_DIR}}) { Remove-Item -Recurse -Force {{.DIST_DIR}} }"
        platforms: [windows]
      - cmd: rm -rf {{.DIST_DIR}}
        platforms: [darwin, linux]
      - cmd: powershell -Command "if (Test-Path {{.REPORTS_DIR}}) { Remove-Item -Recurse -Force {{.REPORTS_DIR}} }"
        platforms: [windows]
      - cmd: rm -rf {{.REPORTS_DIR}}
        platforms: [darwin, linux]
      - cmd: powershell -Command "if (Test-Path coverage) { Remove-Item -Recurse -Force coverage }"
        platforms: [windows]
      - cmd: rm -rf coverage
        platforms: [darwin, linux]
  bundle:
    desc: Bundle the project into executables
    deps: [build]
    cmds:
      - echo "Bundle task completed - binaries are built as part of the build process"

  # Complete build solution
  build-all:
    desc: Build Runix binary and all example drivers
    cmds:
      - task: bundle
      # Create directories
      - cmd: powershell -Command "New-Item -ItemType Directory -Force -Path {{.BIN_DIR}} | Out-Null"
        platforms: [windows]
      - cmd: powershell -Command "New-Item -ItemType Directory -Force -Path {{.BIN_DIR}}/drivers | Out-Null"
        platforms: [windows]
      - cmd: mkdir -p {{.BIN_DIR}} {{.BIN_DIR}}/drivers
        platforms: [darwin, linux]
      # Create the runix executable
      - cmd: powershell -Command "npm run build-binaries"
        platforms: [windows]
      - cmd: npm run build-binaries
        platforms: [darwin, linux]
      # Build the drivers as executables
      - task: build-drivers
  verify-drivers:
    desc: Verify that drivers are correctly installed and accessible
    cmds:
      - echo "Verifying drivers..."
      - cmd: npx ts-node src/drivers/driverRegistry.ts verify
        platforms: [windows, darwin, linux]

  import-steps:
    desc: Import and register all driver steps
    cmds:
      - echo "Importing driver steps..."
      - cmd: powershell -Command "if (Test-Path scripts/import-driver-steps.js) { node scripts/import-driver-steps.js } else { echo 'Warning Could not import steps' }"
        platforms: [windows]
      - cmd: bash -c "if [ -f scripts/import-driver-steps.js ]; then node scripts/import-driver-steps.js; else echo 'Warning Could not import steps'; fi"
        platforms: [darwin, linux]

  run-with-port:
    desc: Run a feature file with a specific port
    cmds:
      - cmd: $env:RUNIX_DRIVER_PORT="{{.PORT}}"; ts-node src/index.ts run {{.FEATURE_PATH}} --driver={{.DRIVER}}
        platforms: [windows]
      - cmd: RUNIX_DRIVER_PORT={{.PORT}} ts-node src/index.ts run {{.FEATURE_PATH}} --driver={{.DRIVER}}
        platforms: [darwin, linux]
    requires:
      vars: [PORT, FEATURE_PATH, DRIVER]

  # Driver tasks
  build-drivers:
    desc: Build all drivers as standalone executables
    cmds:
      - cmd: powershell -Command "scripts/build-drivers.ps1 -sourceDir drivers -destDir bin"
        platforms: [windows]
      - cmd: bash scripts/build-drivers.sh drivers bin
        platforms: [darwin, linux]

  create-driver:
    desc: Create a new driver scaffold
    cmds:
      - node scripts/create-driver.js {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  test-driver:
    desc: Test a specific driver
    cmds:
      - node scripts/test-driver.js {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  list-drivers:
    desc: List all available drivers
    cmds:
      - ts-node src/index.ts list-drivers

  # Run tasks
  run:
    desc: Run a feature file with Runix
    cmds:
      - ts-node src/index.ts run {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  run:example:
    desc: Run the example feature
    cmds:
      - ts-node src/index.ts run {{.SCENARIO_DIR}}/example.feature

  run:driver-example:
    desc: Run the example driver feature
    cmds:
      - ts-node src/index.ts run {{.SCENARIO_DIR}}/example-driver.feature

  run:driver-example:with-port:
    desc: Run the example driver feature with a specific port
    cmds:
      - task: run-with-port
        vars:
          PORT: "{{.PORT}}"
          FEATURE_PATH: scenarios/example-driver.feature
          DRIVER: example-driver
    requires:
      vars: [PORT]

  # Development tasks
  dev:
    desc: Run in development mode with auto-reload
    cmds:
      - ts-node-dev --respawn src/index.ts {{.CLI_ARGS}}

  # Development driver workflow
  dev-drivers:
    desc: Build drivers and run example scenarios
    cmds:
      - task: build-drivers
      - task: run:driver-example

  # Documentation tasks
  docs:
    desc: Generate documentation
    cmds:
      - echo "Documentation generation not implemented yet"

  # CI/CD tasks
  ci:
    desc: Run continuous integration tasks
    cmds:
      - task: clean
      - task: build
      - task: test:coverage
      - task: bundle

  # Setup and installation tasks
  setup:
    desc: Setup development environment
    cmds:
      - npm install
      - cmd: powershell -Command "if (!(Test-Path {{.REPORTS_DIR}})) { New-Item -ItemType Directory -Force -Path {{.REPORTS_DIR}} }"
        platforms: [windows]
      - cmd: mkdir -p {{.REPORTS_DIR}}
        platforms: [darwin, linux]
      - cmd: powershell -Command "if (!(Test-Path logs)) { New-Item -ItemType Directory -Force -Path logs }"
        platforms: [windows]
      - cmd: mkdir -p logs
        platforms: [darwin, linux]
      - cmd: powershell -Command "if (!(Test-Path screenshots)) { New-Item -ItemType Directory -Force -Path screenshots }"
        platforms: [windows]
      - cmd: mkdir -p screenshots
        platforms: [darwin, linux]

  # Driver development workflow
  driver:dev:
    desc: Complete driver development workflow
    cmds:
      - task: create-driver
        vars: { CLI_ARGS: "{{.CLI_ARGS}}" }
      - echo "Installing dependencies for {{.CLI_ARGS}} driver..."
      - cmd: powershell -Command "Push-Location {{.DRIVERS_DIR}}/{{.CLI_ARGS}} && npm install && Pop-Location"
        platforms: [windows]
      - cmd: cd {{.DRIVERS_DIR}}/{{.CLI_ARGS}} && npm install && cd -
        platforms: [darwin, linux]
      - echo "Testing {{.CLI_ARGS}} driver..."
      - task: test-driver
        vars: { CLI_ARGS: "{{.DRIVERS_DIR}}/{{.CLI_ARGS}}" }
    requires:
      vars: [CLI_ARGS]
  # Quick start for new users
  quickstart:
    desc: "Runs the full quickstart process: setup, build, and run comprehensive examples"
    deps: [setup, build-all, verify-drivers]
    cmds:
      - echo "Starting Runix quickstart process"
      - echo "All components built successfully!"
      - echo ""
      - echo "üöÄ Running basic demonstration..."
      - echo "üìã Testing with example driver first"
      - echo ""
      - echo "1Ô∏è‚É£  Running basic example scenario"
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.exe run tests\fixtures\example-driver.feature --driver=example-driver"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run tests/fixtures/example-driver.feature --driver=example-driver
        platforms: [darwin, linux]
      - echo ""
      - echo "üéâ Quickstart complete! Basic functionality verified."
      - echo "üìä Check runix-report.json for detailed results"
      - echo "üìÅ Check {{.LOG_DIR}} for execution logs"

  quickstart:debug:
    desc: Setup and debug example with verbose logging
    cmds:
      - echo "Starting Runix debug quickstart"
      - task: setup
      - task: build-all
      - task: verify-drivers
      - echo "Running in debug mode with full logging"
      - cmd: 'cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_LOG_LEVEL=DEBUG&& set RUNIX_LOG_CONSOLE=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\example-driver.feature --driver=example-driver --driverConfig={\"timeout\":30000}"'
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_LOG_LEVEL=DEBUG RUNIX_LOG_CONSOLE=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/example-driver.feature --driver=example-driver --driverConfig='{\"timeout\":30000}'
        platforms: [darwin, linux]

  quickstart-simple:
    desc: "Quick demonstration of Runix with example driver"
    deps: [build-all]
    cmds:
      - echo "üöÄ Starting Runix Quick Demo..."
      - echo "üìã This will run a simple test with the example driver"
      - cmd: |
          set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR={{.ROOT_DIR}}\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\example-driver.feature --driver=example-driver
        platforms: [windows]
      - cmd: |
          RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR={{.ROOT_DIR}}/bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/example-driver.feature --driver=example-driver
        platforms: [linux, darwin]
      - echo "‚úÖ Quick demo complete!"

  quickstart-web:
    desc: "Quick demonstration of Runix with web driver"
    deps: [build-all]
    cmds:
      - echo "üåê Starting Runix Web Driver Quick Demo..."
      - echo "üìã This will run web automation tests"
      - echo "üñºÔ∏è  Screenshots will be saved to {{.SCREENSHOT_DIR}}/ directory"
      - cmd: |
          set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR={{.ROOT_DIR}}\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-comprehensive-demo.feature --driver=web-driver --driverConfig="{\"headless\":false,\"timeout\":15000,\"screenshotDir\":\"{{.SCREENSHOT_DIR}}\"}"
        platforms: [windows]
      - cmd: |
          RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR={{.ROOT_DIR}}/bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-comprehensive-demo.feature --driver=web-driver --driverConfig='{"headless":false,"timeout":15000,"screenshotDir":"{{.SCREENSHOT_DIR}}"}'
        platforms: [linux, darwin]
      - echo "‚úÖ Web driver demo complete!"
      - echo "üìä Check reports/runix-report.html for detailed results"
      - echo "üñºÔ∏è  Check {{.SCREENSHOT_DIR}}/ directory for visual proof"

  quickstart:web-showcase:
    desc: "Comprehensive web driver showcase - build and run multiple web scenarios"
    deps: [setup, build-all, verify-drivers]
    cmds:
      - echo "üöÄ Starting Runix Web Driver Showcase..."
      - echo "‚úÖ All drivers built successfully"
      - echo ""
      - echo "üåê Running comprehensive web automation demo..."
      - echo "üìã This will demonstrate:"
      - echo "   - Browser automation (both headless and visible modes)"
      - echo "   - Form interactions and input handling"
      - echo "   - Element verification and assertions"
      - echo "   - Screenshot capture"
      - echo "   - Advanced web interactions"
      - echo ""
      - echo "‚è±Ô∏è  Starting in 3 seconds..."
      - cmd: timeout /t 3 >nul
        platforms: [windows]
      - cmd: sleep 3
        platforms: [linux, darwin]
      - echo ""
      - echo "üé¨ Running basic web test scenario..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-test.feature --driver=web-driver"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-test.feature --driver=web-driver
        platforms: [darwin, linux]
      - echo ""
      - echo "üé≠ Running comprehensive web demo..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-comprehensive-demo.feature --driver=web-driver"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-comprehensive-demo.feature --driver=web-driver
        platforms: [darwin, linux]
      - echo ""
      - echo "üé™ Running advanced web showcase..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-showcase.feature --driver=web-driver"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-showcase.feature --driver=web-driver
        platforms: [darwin, linux]
      - echo ""
      - echo "üìä Web showcase completed!"
      - echo "üìÅ Check runix-report.json for detailed results"
      - echo "üìÅ Check {{.LOG_DIR}} for execution logs"
      - echo "üì∏ Screenshots saved in {{.SCREENSHOT_DIR}} directory"
      - echo ""
      - echo "üéâ Welcome to Runix web automation! You're ready to automate any website!"

  fix-firewall:
    desc: "Fix Windows Firewall rules for Node.js drivers"
    cmds:
      - cmd: |
          echo "üî• Checking and fixing Windows Firewall rules for Node.js..."
          netsh advfirewall firewall delete rule name="Node.js: Server-side JavaScript" >nul 2>&1
          netsh advfirewall firewall delete rule name="Node.js" >nul 2>&1
          netsh advfirewall firewall add rule name="Node.js: Server-side JavaScript" dir=in action=allow program="%ProgramFiles%\nodejs\node.exe" enable=yes
          netsh advfirewall firewall add rule name="Node.js: Server-side JavaScript" dir=out action=allow program="%ProgramFiles%\nodejs\node.exe" enable=yes
          echo "‚úÖ Firewall rules updated!"
        platforms: [windows]
      - cmd: echo "‚ÑπÔ∏è  Firewall configuration not needed on this platform"
        platforms: [darwin, linux]

  quickstart-with-firewall-fix:
    desc: "Quickstart with automatic firewall fix"
    cmds:
      - echo "üîß Ensuring Node.js firewall permissions..."
      - task: fix-firewall
      - echo "üöÄ Starting quickstart..."
      - task: quickstart
  # Testing commands
  test:
    desc: Run all tests
    cmds:
      - npm test

  test:unit:
    desc: Run unit tests only
    cmds:
      - npm test -- --testPathPattern=tests/unit

  test:integration:
    desc: Run integration tests only
    cmds:
      - npm test -- --testPathPattern=tests/integration

  test:e2e:
    desc: Run end-to-end tests only
    cmds:
      - npm test -- --testPathPattern=tests/e2e

  test:coverage:
    desc: Run all tests with coverage report
    cmds:
      - npm test -- --coverage

  test:watch:
    desc: Run tests in watch mode
    cmds:
      - npm test -- --watch

  test:driver:
    desc: Test a specific driver
    cmds:
      - node scripts/test-driver.js {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  test:ai-driver:
    desc: Test AI driver specifically
    cmds:
      - npm test -- --testPathPattern=ai

  test:web-driver:
    desc: Test web driver specifically (requires browser)
    cmds:
      - npm test -- --testPathPattern=web

  # Comprehensive test tasks
  test:
    desc: "Run all test suites"
    cmds:
      - task: test-unit
      - task: test-integration
      - task: test-e2e
      - task: test-coverage
      - task: test-drivers
      - task: test-scenarios

  test-unit:
    desc: "Run unit tests"
    cmds:
      - npm test -- --testPathPattern="tests/unit" --verbose

  test-integration:
    desc: "Run integration tests"
    cmds:
      - npm test -- --testPathPattern="tests/integration" --verbose

  test-e2e:
    desc: "Run end-to-end tests"
    cmds:
      - npm test -- --testPathPattern="tests/e2e" --verbose

  test-watch:
    desc: "Run tests in watch mode"
    cmds:
      - npm test -- --watch

  test-coverage:
    desc: "Run tests with coverage report"
    cmds:
      - npm test -- --coverage

  # Driver Testing
  test-drivers:
    desc: "Test all drivers"
    cmds:
      - task: test-example-driver
      - task: test-web-driver
      - task: test-system-driver
      - task: test-vision-driver
      - task: test-ai-driver

  test-example-driver:
    desc: "Test example driver"
    cmds:
      - npm test -- --testPathPattern="example.*driver" --verbose

  test-web-driver:
    desc: "Test web driver"
    cmds:
      - npm test -- --testPathPattern="web.*driver" --verbose

  test-system-driver:
    desc: "Test system driver"
    cmds:
      - npm test -- --testPathPattern="system.*driver" --verbose

  test-vision-driver:
    desc: "Test vision driver"
    cmds:
      - npm test -- --testPathPattern="vision.*driver" --verbose

  test-ai-driver:
    desc: "Test AI driver"
    cmds:
      - npm test -- --testPathPattern="ai.*driver" --verbose

  # Feature Testing
  test-scenarios:
    desc: "Run all feature scenarios"
    cmds:
      - task: test-example-scenarios
      - task: test-web-scenarios
      - task: test-comprehensive-scenarios

  test-example-scenarios:
    desc: "Run example driver scenarios"
    cmds:
      - node dist/index.js run tests/scenarios/example-driver.feature --reporter=detailed
      - node dist/index.js run tests/scenarios/example-driver-comprehensive.feature --reporter=detailed

  test-web-scenarios:
    desc: "Run web automation scenarios"
    cmds:
      - node dist/index.js run tests/scenarios/web-test.feature --reporter=detailed
      - node dist/index.js run tests/scenarios/web-comprehensive.feature --reporter=detailed

  test-comprehensive-scenarios:
    desc: "Run comprehensive test scenarios"
    cmds:
      - node dist/index.js run tests/scenarios/web-comprehensive-demo.feature --reporter=detailed
      - node dist/index.js run tests/scenarios/web-showcase.feature --reporter=detailed

  test-showcase:
    desc: "Run impressive showcase scenarios"
    cmds:
      - node dist/index.js run tests/scenarios/web-showcase.feature --tags=@showcase --reporter=detailed
      - node dist/index.js run tests/scenarios/web-advanced-features.feature --tags=@demo --reporter=detailed

  # Performance Testing
  test-performance:
    desc: "Run performance tests"
    cmds:
      - npm test -- --testPathPattern="performance" --verbose --testTimeout=60000

  # Continuous Integration Testing
  test-ci:
    desc: "Run CI test suite"
    cmds:
      - task: build
      - task: test-unit
      - task: test-integration
      - task: test-drivers
      - task: test-coverage

  # Development Testing
  test-dev:
    desc: "Run development test suite (faster)"
    cmds:
      - npm test -- --testPathPattern="unit|integration" --verbose --bail

  test-quick:
    desc: "Run quick smoke tests"
    cmds:
      - npm test -- --testPathPattern="unit" --testNamePattern="smoke|basic" --verbose

  # Specific Test Categories
  test-engine:
    desc: "Test core engine functionality"
    cmds:
      - npm test -- --testPathPattern="engine" --verbose

  test-parser:
    desc: "Test Gherkin parser"
    cmds:
      - npm test -- --testPathPattern="parser" --verbose

  test-registry:
    desc: "Test driver registry"
    cmds:
      - npm test -- --testPathPattern="registry" --verbose

  # Debugging Tests
  test-debug:
    desc: "Run tests with debugging enabled"
    cmds:
      - npm test -- --verbose --detectOpenHandles --forceExit

  test-specific:
    desc: "Run specific test file (use: task test-specific TEST_FILE=path/to/test.js)"
    cmds:
      - npm test -- {{.TEST_FILE}} --verbose

  # Clean and Reset
  clean-tests:
    desc: "Clean test artifacts"
    cmds:
      - rm -rf coverage/
      - rm -rf test-results/
      - rm -rf screenshots/
      - rm -rf reports/
      - rm -rf logs/test-*.log

  # Setup Test Environment
  setup-test-env:
    desc: "Setup test environment"
    cmds:
      - mkdir -p logs
      - mkdir -p reports
      - mkdir -p screenshots
      - mkdir -p test-results

  # Run Tests with Different Configurations
  test-headless:
    desc: "Run web tests in headless mode"
    env:
      HEADLESS: "true"
    cmds:
      - task: test-web-scenarios
  test-ui:
    desc: "Run web tests with visible browser"
    env:
      HEADLESS: "false"
    cmds:
      - task: test-web-scenarios

  # Utility Tasks
  validate:
    desc: "Validate project setup"
    cmds:
      - node dist/index.js validate

  lint:
    desc: "Run linter"
    cmds:
      - npm run lint

  format:
    desc: "Format code"
    cmds:
      - npm run format

  # Documentation Tasks
  docs:
    desc: "Generate documentation"
    cmds:
      - npm run docs
  help:
    desc: "Show detailed help"
    cmds:
      - echo "Runix Task Runner"
      - echo "================"
      - echo ""
      - echo "Main Tasks:"
      - echo "  install       - Install all dependencies"
      - echo "  build         - Build project and drivers"
      - echo "  test          - Run all tests"
      - echo "  test-ci       - Run CI test suite"
      - echo ""
      - echo "Development:"
      - echo "  test-dev      - Quick development tests"
      - echo "  test-watch    - Watch mode testing"
      - echo "  dev           - Development mode"
      - echo ""
      - echo "Specific Testing:"
      - echo "  test-drivers  - Test all drivers"
      - echo "  test-scenarios- Run feature scenarios"
      - echo "  test-showcase - Run demo scenarios"
      - echo ""
      - echo "Use 'task --list' for all available tasks"
