version: '3'

vars:
  DIST_DIR: dist
  REPORTS_DIR: reports
  DRIVERS_DIR: drivers
  BIN_DIR: bin
  BINARY_DIR: 'bin/runix'
  ROOT_DIR: '{{.PWD}}'
  SCENARIO_DIR: tests/scenarios
  LOG_DIR: logs
  SCREENSHOT_DIR: screenshots

tasks:
  default:
    desc: "Default task: Runs the full quickstart process (setup, build, verify-drivers, run example)."
    cmds:
      - task: quickstart
  # Build tasks
  build-engine:
    desc: Build the Runix engine only (TypeScript compilation)
    cmds:
      - npm run build
      - cmd: "powershell -Command \"if (Test-Path .env) { Copy-Item .env {{.DIST_DIR}}/ -Force }\""
        platforms: [windows]
      - cmd: if [ -f .env ]; then cp .env {{.DIST_DIR}}/; fi
        platforms: [darwin, linux]
    sources:
      - src/**/*.ts
    generates:
      - "{{.DIST_DIR}}/**/*.js"

  clean:
    desc: Clean build artifacts
    cmds:
      - cmd: "powershell -Command \"if (Test-Path {{.DIST_DIR}}) { Remove-Item -Recurse -Force {{.DIST_DIR}} }\""
        platforms: [windows]
      - cmd: rm -rf {{.DIST_DIR}}
        platforms: [darwin, linux]
      - cmd: "powershell -Command \"if (Test-Path {{.REPORTS_DIR}}) { Remove-Item -Recurse -Force {{.REPORTS_DIR}} }\""
        platforms: [windows]
      - cmd: rm -rf {{.REPORTS_DIR}}
        platforms: [darwin, linux]
      - cmd: "powershell -Command \"if (Test-Path coverage) { Remove-Item -Recurse -Force coverage }\""
        platforms: [windows]
      - cmd: rm -rf coverage
        platforms: [darwin, linux]

  force-clean:
    desc: Force clean build artifacts with process termination and retry logic
    cmds:
      - cmd: "powershell -NoProfile -ExecutionPolicy Bypass -File scripts/force-clean.ps1"
        platforms: [windows]
      - cmd: ./scripts/kill-drivers.sh && rm -rf dist bin temp coverage reports
        platforms: [darwin, linux]
  bundle:
    desc: Bundle the project into executables (runix binary and drivers)
    deps:
      - build-engine
    cmds:
      - cmd: "powershell -Command \"New-Item -ItemType Directory -Force -Path {{.BIN_DIR}} | Out-Null\""
        platforms: [windows]
      - cmd: "powershell -Command \"New-Item -ItemType Directory -Force -Path {{.BIN_DIR}}/drivers | Out-Null\""
        platforms: [windows]
      - cmd: mkdir -p {{.BIN_DIR}} {{.BIN_DIR}}/drivers
        platforms: [darwin, linux]
      - cmd: "powershell -Command \"npm run build-binaries\""
        platforms: [windows]
      - cmd: npm run build-binaries
        platforms: [darwin, linux]
      - task: build-drivers    
  build:
    desc: Build Runix binary and all drivers (complete build)
    cmds:
      - task: kill-drivers
      - task: clean
      - task: bundle
      - task: verify-drivers
      
  verify-drivers:
    desc: Verify that drivers are correctly installed and accessible
    cmds:
      - echo "Verifying drivers..."
      - cmd: node scripts/verify-drivers.js
        platforms: [windows, darwin, linux]

  import-steps:
    desc: Import and register all driver steps
    cmds:
      - echo "Importing driver steps..."
      - cmd: "powershell -Command \"if (Test-Path scripts/import-driver-steps.js) { node scripts/import-driver-steps.js } else { echo 'Warning Could not import steps' }\""
        platforms: [windows]
      - cmd: bash -c "if [ -f scripts/import-driver-steps.js ]; then node scripts/import-driver-steps.js; else echo 'Warning Could not import steps'; fi"
        platforms: [darwin, linux]

  run-with-port:
    desc: Run a feature file with a specific port
    cmds:
      - cmd: $env:RUNIX_DRIVER_PORT="{{.PORT}}"; ts-node src/index.ts run {{.FEATURE_PATH}} --driver={{.DRIVER}}
        platforms: [windows]
      - cmd: RUNIX_DRIVER_PORT={{.PORT}} ts-node src/index.ts run {{.FEATURE_PATH}} --driver={{.DRIVER}}
        platforms: [darwin, linux]
    requires:
      vars: [PORT, FEATURE_PATH, DRIVER]

  # Driver tasks
  build-drivers:
    desc: Build all drivers as standalone executables
    cmds:
      - cmd: "powershell -Command \"scripts/build-drivers.ps1 -sourceDir drivers -destDir bin\""
        platforms: [windows]
      - cmd: bash scripts/build-drivers.sh drivers bin
        platforms: [darwin, linux]

  create-driver:
    desc: Create a new driver scaffold
    cmds:
      - node scripts/create-driver.js {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]
  test-driver:
    desc: Test a specific driver
    cmds:
      - node scripts/test-driver.js {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  list-drivers:
    desc: List all available drivers
    cmds:
      - ts-node src/index.ts list-drivers
  find-running-drivers:
    desc: Find all running Runix driver processes (Node.js and .exe) with ephemeral ports
    cmds:
      - cmd: "powershell -Command \"Write-Host '🔍 Finding running Runix drivers...' -ForegroundColor Yellow; Write-Host 'Runix drivers can be Node.js processes or compiled .exe files' -ForegroundColor Cyan; Write-Host ''; Write-Host '📊 Node.js driver processes:' -ForegroundColor Green; \\$nodeProcesses = Get-Process -Name 'node' -ErrorAction SilentlyContinue | Where-Object { \\$_.CommandLine -like '*driver*' -or \\$_.CommandLine -like '*index.js*' }; if (\\$nodeProcesses) { \\$nodeProcesses | ForEach-Object { \\$cmdLine = if (\\$_.CommandLine.Length -gt 80) { \\$_.CommandLine.Substring(0, 77) + '...' } else { \\$_.CommandLine }; Write-Host \\\"  PID: \\$(\\$_.Id) | Memory: \\$([math]::Round(\\$_.WorkingSet/1MB,2))MB | \\$cmdLine\\\" -ForegroundColor White } } else { Write-Host '  No Node.js driver processes found' -ForegroundColor Gray }; Write-Host ''; Write-Host '🚀 Compiled driver executables (.exe):' -ForegroundColor Green; \\$driverNames = @('AIDriver', 'WebDriver', 'SystemDriver', 'VisionDriver', 'ExampleDriver'); \\$exeDrivers = @(); foreach (\\$name in \\$driverNames) { try { \\$proc = Get-Process -Name \\$name -ErrorAction SilentlyContinue; if (\\$proc) { \\$exeDrivers += \\$proc } } catch {} }; if (\\$exeDrivers) { \\$exeDrivers | ForEach-Object { Write-Host \\\"  PID: \\$(\\$_.Id) | Memory: \\$([math]::Round(\\$_.WorkingSet/1MB,2))MB | \\$(\\$_.ProcessName).exe\\\" -ForegroundColor White } } else { Write-Host '  No compiled driver executables found' -ForegroundColor Gray }; Write-Host ''; Write-Host '🌐 Active network connections (driver ports 9000-9999):' -ForegroundColor Green; \\$connections = Get-NetTCPConnection -State Listen -ErrorAction SilentlyContinue | Where-Object { \\$_.LocalPort -ge 9000 -and \\$_.LocalPort -le 9999 }; if (\\$connections) { \\$connections | ForEach-Object { \\$process = Get-Process -Id \\$_.OwningProcess -ErrorAction SilentlyContinue; if (\\$process) { Write-Host \\\"  Port: \\$(\\$_.LocalPort) | PID: \\$(\\$process.Id) | Process: \\$(\\$process.Name)\\\" -ForegroundColor White } } } else { Write-Host '  No driver ports in use' -ForegroundColor Gray }\""
        platforms: [windows]
      - cmd: "echo \"🔍 Finding running Runix drivers...\"; echo \"Runix drivers can be Node.js processes or compiled executables\"; echo \"\"; echo \"📊 Node.js driver processes:\"; ps aux | grep -E \"(node.*driver|node.*index\\.js)\" | grep -v grep | while read line; do echo \"  $line\"; done; echo \"\"; echo \"🚀 Compiled driver executables:\"; ps aux | grep -E \"(.*Driver|.*driver)\" | grep -v grep | grep -v node | while read line; do echo \"  $line\"; done; echo \"\"; echo \"🌐 Active network connections (driver ports 9000-9999):\"; lsof -iTCP:9000-9999 -sTCP:LISTEN 2>/dev/null | while read line; do echo \"  $line\"; done"
        platforms: [darwin, linux]
        
  kill-drivers:
    desc: Kill all running Runix driver processes (dynamic detection)
    cmds:
      - cmd: >-
          powershell -NoProfile -ExecutionPolicy Bypass
          -File scripts/kill-drivers.ps1
          -BinDir '{{.BIN_DIR}}'
        platforms: [windows]
      - cmd: >-
          echo "⚠️ Killing Runix driver processes...";
          ps aux | grep -E "driver" | grep -v grep | awk '{print $2}' |
          xargs -r kill -9;
          for exe in {{.BIN_DIR}}/drivers/*.exe; do
            [ -f "$exe" ] && pkill -f "$(basename "$exe" .exe).exe";
          done;
          lsof -iTCP:9000-9999 -sTCP:LISTEN | awk '{print $2}' |
          xargs -r kill -9;
          true
        platforms: [darwin, linux]

  kill-driver-port:
    desc: Kill process running on a specific driver port
    cmds:
      - cmd: "powershell -Command \"\\$port = '{{.PORT}}'; Write-Host \\\"🎯 Killing process on port \\$port...\\\" -ForegroundColor Yellow; \\$process = Get-NetTCPConnection -LocalPort \\$port -ErrorAction SilentlyContinue | ForEach-Object { Get-Process -Id \\$_.OwningProcess -ErrorAction SilentlyContinue }; if (\\$process) { Write-Host \\\"Killing process: \\$(\\$process.Name) (PID: \\$(\\$process.Id))\\\" -ForegroundColor Red; Stop-Process -Id \\$process.Id -Force; Write-Host \\\"Process killed.\\\" -ForegroundColor Green } else { Write-Host \\\"No process found on port \\$port.\\\" -ForegroundColor Yellow }\""
        platforms: [windows]
      - cmd: "port={{.PORT}}; echo \"🎯 Killing process on port $port...\"; pid=$(lsof -ti tcp:$port 2>/dev/null); if [ ! -z \"$pid\" ]; then echo \"Killing process on port $port (PID: $pid)\"; kill -9 $pid && echo \"Process killed.\" || echo \"Failed to kill process.\"; else echo \"No process found on port $port.\"; fi"
        platforms: [darwin, linux]
    requires:
      vars: [PORT]
  restart-web-driver:
    desc: Restart the web driver on port 9001
    cmds:
      - task: kill-driver-port
        vars:
          PORT: 9001
      - cmd: "powershell -Command \"Start-Sleep -Seconds 2; Write-Host '🚀 Starting web driver...' -ForegroundColor Green\""
        platforms: [windows]
      - cmd: sleep 2; echo "🚀 Starting web driver..."
        platforms: [darwin, linux]
      - cmd: "powershell -Command \"cd drivers/web-driver; Start-Process -FilePath 'npm' -ArgumentList 'start' -WindowStyle Minimized\""
        platforms: [windows]
      - cmd: cd drivers/web-driver && npm start &
        platforms: [darwin, linux]

  start-example-driver:
    desc: Start the example driver on port 9000
    cmds:
      - cmd: "powershell -Command \"Write-Host '🚀 Starting example driver on port 9000...' -ForegroundColor Green; cd drivers/example-driver; npm start\""
        platforms: [windows]
      - cmd: echo "🚀 Starting example driver on port 9000..."; cd drivers/example-driver && npm start
        platforms: [darwin, linux]

  start-web-driver:
    desc: Start the web driver on port 9001
    cmds:
      - cmd: "powershell -Command \"Write-Host '🚀 Starting web driver on port 9001...' -ForegroundColor Green; cd drivers/web-driver; npm start\""
        platforms: [windows]
      - cmd: echo "🚀 Starting web driver on port 9001..."; cd drivers/web-driver && npm start
        platforms: [darwin, linux]

  start-system-driver:
    desc: Start the system driver on port 9002
    cmds:
      - cmd: "powershell -Command \"Write-Host '🚀 Starting system driver on port 9002...' -ForegroundColor Green; cd drivers/system-driver; npm start\""
        platforms: [windows]
      - cmd: echo "🚀 Starting system driver on port 9002..."; cd drivers/system-driver && npm start
        platforms: [darwin, linux]

  start-vision-driver:
    desc: Start the vision driver on port 9003
    cmds:
      - cmd: "powershell -Command \"Write-Host '🚀 Starting vision driver on port 9003...' -ForegroundColor Green; cd drivers/vision-driver; npm start\""
        platforms: [windows]
      - cmd: echo "🚀 Starting vision driver on port 9003..."; cd drivers/vision-driver && npm start
        platforms: [darwin, linux]

  start-ai-driver:
    desc: Start the AI driver on port 9001 (shares with web-driver)
    cmds:
      - cmd: "powershell -Command \"Write-Host '🚀 Starting AI driver on port 9001...' -ForegroundColor Green; cd drivers/ai-driver; npm start\""
        platforms: [windows]
      - cmd: echo "🚀 Starting AI driver on port 9001..."; cd drivers/ai-driver && npm start
        platforms: [darwin, linux]
  start-all-drivers:
    desc: Start all Runix drivers in background
    cmds:
      - cmd: "powershell -Command \"Write-Host '🚀 Starting all Runix drivers...' -ForegroundColor Green; Start-Process -FilePath 'powershell' -ArgumentList '-Command cd drivers/example-driver; npm start' -WindowStyle Minimized; Start-Process -FilePath 'powershell' -ArgumentList '-Command cd drivers/system-driver; npm start' -WindowStyle Minimized; Start-Process -FilePath 'powershell' -ArgumentList '-Command cd drivers/vision-driver; npm start' -WindowStyle Minimized; Start-Process -FilePath 'powershell' -ArgumentList '-Command cd drivers/web-driver; npm start' -WindowStyle Minimized; Write-Host 'All drivers started in background processes.' -ForegroundColor Green\""
        platforms: [windows]
      - cmd: echo "🚀 Starting all Runix drivers..."; (cd drivers/example-driver && npm start &); (cd drivers/system-driver && npm start &); (cd drivers/vision-driver && npm start &); (cd drivers/web-driver && npm start &); echo "All drivers started in background."
        platforms: [darwin, linux]
  driver-health-check:
    desc: Check health status of all running drivers (Node.js and .exe)
    cmds:
      - cmd: "powershell -Command \"Write-Host '🏥 Checking driver health status...' -ForegroundColor Yellow; \\$healthChecks = @(); \\$connections = Get-NetTCPConnection -State Listen -ErrorAction SilentlyContinue | Where-Object { \\$_.LocalPort -ge 9000 -and \\$_.LocalPort -le 9999 }; if (\\$connections) { \\$connections | ForEach-Object { \\$port = \\$_.LocalPort; \\$process = Get-Process -Id \\$_.OwningProcess -ErrorAction SilentlyContinue; if (\\$process) { \\$processType = if (\\$process.Name -eq 'node') { 'Node.js' } elseif (\\$process.ProcessName -like '*Driver*') { '.exe' } else { 'Unknown' }; Write-Host \\\"🔍 Testing driver on port \\$port (\\$processType process)...\\\" -ForegroundColor Cyan; try { \\$response = Invoke-WebRequest -Uri \\\"http://127.0.0.1:\\$port/health\\\" -Method GET -TimeoutSec 5 -ErrorAction Stop; Write-Host \\\"✅ Port \\$port - HTTP \\$(\\$response.StatusCode) - Driver responsive (\\$processType)\\\" -ForegroundColor Green } catch { Write-Host \\\"❌ Port \\$port - Driver not responding or no health endpoint (\\$processType)\\\" -ForegroundColor Red } } } } else { Write-Host '❌ No driver ports found (9000-9999)' -ForegroundColor Red }\""
        platforms: [windows]
      - cmd: "echo \"🏥 Checking driver health status...\"; lsof -iTCP:9000-9999 -sTCP:LISTEN 2>/dev/null | while read line; do port=$(echo $line | awk -F: '{print $2}' | awk '{print $1}'); process_name=$(echo $line | awk '{print $1}'); echo \"🔍 Testing driver on port $port ($process_name process)...\"; if curl -s --max-time 5 \"http://127.0.0.1:$port/health\" >/dev/null 2>&1; then echo \"✅ Port $port - Driver responsive ($process_name)\"; else echo \"❌ Port $port - Driver not responding ($process_name)\"; fi; done"
        platforms: [darwin, linux]

  driver-logs:
    desc: Show recent logs from all drivers
    cmds:
      - cmd: "powershell -Command \"Write-Host '📋 Recent driver logs...' -ForegroundColor Yellow; if (Test-Path 'logs') { Get-ChildItem 'logs' -Filter '*.log' | ForEach-Object { Write-Host \\\"\\\\n📄 \\$(\\$_.Name):\\\" -ForegroundColor Cyan; Get-Content \\$_.FullName -Tail 10 | ForEach-Object { Write-Host \\\"  \\$_\\\" -ForegroundColor Gray } } } else { Write-Host 'No logs directory found.' -ForegroundColor Red }\""
        platforms: [windows]
      - cmd: "echo \"📋 Recent driver logs...\"; if [ -d \"logs\" ]; then for logfile in logs/*.log; do if [ -f \"$logfile\" ]; then echo \"\"; echo \"📄 $(basename $logfile):\"; tail -10 \"$logfile\" | sed 's/^/  /'; fi; done; else echo \"No logs directory found.\"; fi"
        platforms: [darwin, linux]

  force-kill-drivers:
    desc: Nuclear option - force kill all Node.js processes (use with extreme caution)
    cmds:
      - cmd: "powershell -Command \"Write-Host '💥 NUCLEAR OPTION: Force killing ALL Node.js processes!' -ForegroundColor Red; Write-Host 'This will kill ALL Node.js applications, not just drivers!' -ForegroundColor Yellow; \\$confirmation = Read-Host 'Type YES to confirm'; if (\\$confirmation -eq 'YES') { Get-Process -Name 'node' -ErrorAction SilentlyContinue | ForEach-Object { Write-Host \\\"Force killing: \\$(\\$_.Name) (PID: \\$(\\$_.Id))\\\" -ForegroundColor Red; Stop-Process -Id \\$_.Id -Force }; Write-Host 'All Node.js processes terminated.' -ForegroundColor Green } else { Write-Host 'Operation cancelled.' -ForegroundColor Yellow }\""
        platforms: [windows]
      - cmd: "echo \"💥 NUCLEAR OPTION: Force killing ALL Node.js processes!\"; echo \"This will kill ALL Node.js applications, not just drivers!\"; read -p \"Type YES to confirm: \" confirmation; if [ \"$confirmation\" = \"YES\" ]; then pkill -9 node && echo \"All Node.js processes terminated.\" || echo \"No Node.js processes found.\"; else echo \"Operation cancelled.\"; fi"
        platforms: [darwin, linux]

  restart-all-drivers:
    desc: Restart all drivers (kill + start)
    cmds:
      - task: kill-drivers
      - cmd: "powershell -Command \"Write-Host 'Waiting 3 seconds for cleanup...' -ForegroundColor Cyan; Start-Sleep -Seconds 3\""
        platforms: [windows]
      - cmd: echo "Waiting 3 seconds for cleanup..."; sleep 3
        platforms: [darwin, linux]
      - task: start-all-drivers
  driver-debug-info:
    desc: Comprehensive driver debugging information (Node.js and .exe)
    cmds:
      - cmd: "powershell -Command \"Write-Host '🔍 COMPREHENSIVE DRIVER DEBUG INFO' -ForegroundColor Magenta; Write-Host '=' * 50 -ForegroundColor Gray; Write-Host '\\\\n📊 System Information:' -ForegroundColor Cyan; Write-Host \\\"OS: \\$(Get-WmiObject -Class Win32_OperatingSystem | Select-Object -ExpandProperty Caption)\\\" -ForegroundColor White; Write-Host \\\"Node.js Version: \\$(node --version 2>\\$null)\\\" -ForegroundColor White; Write-Host \\\"NPM Version: \\$(npm --version 2>\\$null)\\\" -ForegroundColor White; Write-Host \\\"Current Directory: \\$(Get-Location)\\\" -ForegroundColor White; Write-Host \\\"Timestamp: \\$(Get-Date)\\\" -ForegroundColor White; Write-Host '\\\\n🚀 Node.js Driver Processes:' -ForegroundColor Cyan; Get-Process -Name 'node' -ErrorAction SilentlyContinue | Where-Object { \\$_.CommandLine -like '*driver*' } | ForEach-Object { Write-Host \\\"  PID \\$(\\$_.Id): Memory \\$([math]::Round(\\$_.WorkingSet/1MB,2))MB - \\$(\\$_.CommandLine)\\\" -ForegroundColor White }; Write-Host '\\\\n⚙️  Compiled Driver Executables (.exe):' -ForegroundColor Cyan; Get-Process -ErrorAction SilentlyContinue | Where-Object { \\$_.ProcessName -like '*Driver*' -or \\$_.Path -like '*bin\\\\drivers*' } | ForEach-Object { Write-Host \\\"  PID \\$(\\$_.Id): Memory \\$([math]::Round(\\$_.WorkingSet/1MB,2))MB - \\$(\\$_.ProcessName).exe (Path: \\$(\\$_.Path))\\\" -ForegroundColor White }; Write-Host '\\\\n🌐 Network Ports (9000-9999):' -ForegroundColor Cyan; Get-NetTCPConnection -State Listen -ErrorAction SilentlyContinue | Where-Object { \\$_.LocalPort -ge 9000 -and \\$_.LocalPort -le 9999 } | ForEach-Object { \\$process = Get-Process -Id \\$_.OwningProcess -ErrorAction SilentlyContinue; Write-Host \\\"  Port \\$(\\$_.LocalPort): \\$(\\$process.Name) (PID: \\$(\\$process.Id))\\\" -ForegroundColor White }; Write-Host '\\\\n� Driver Directories:' -ForegroundColor Cyan; Get-ChildItem 'drivers' -Directory -ErrorAction SilentlyContinue | ForEach-Object { \\$hasPackage = Test-Path (Join-Path \\$_.FullName 'package.json'); Write-Host \\\"  \\$(\\$_.Name): \\$(if (\\$hasPackage) { 'Has package.json' } else { 'Missing package.json' })\\\" -ForegroundColor White }; Write-Host '\\\\n� Compiled Driver Binaries:' -ForegroundColor Cyan; if (Test-Path 'bin/drivers') { Get-ChildItem 'bin/drivers' -Directory -ErrorAction SilentlyContinue | ForEach-Object { \\$hasExe = Get-ChildItem \\$_.FullName -Filter '*.exe' -ErrorAction SilentlyContinue; Write-Host \\\"  \\$(\\$_.Name): \\$(if (\\$hasExe) { \\$hasExe.Name } else { 'No .exe found' })\\\" -ForegroundColor White } } else { Write-Host '  No bin/drivers directory found' -ForegroundColor Gray }; Write-Host '\\\\n📋 Recent Logs:' -ForegroundColor Cyan; if (Test-Path 'logs') { Get-ChildItem 'logs' -Filter '*.log' | Sort-Object LastWriteTime -Descending | Select-Object -First 3 | ForEach-Object { Write-Host \\\"  \\$(\\$_.Name) (modified: \\$(\\$_.LastWriteTime))\\\" -ForegroundColor White } } else { Write-Host '  No logs directory found' -ForegroundColor Gray }\""
        platforms: [windows]
      - cmd: "echo \"🔍 COMPREHENSIVE DRIVER DEBUG INFO\"; echo \"==================================================\"; echo \"\"; echo \"📊 System Information:\"; echo \"  OS: $(uname -s) $(uname -r)\"; echo \"  Node.js Version: $(node --version 2>/dev/null || echo 'Not found')\"; echo \"  NPM Version: $(npm --version 2>/dev/null || echo 'Not found')\"; echo \"  Current Directory: $(pwd)\"; echo \"  Timestamp: $(date)\"; echo \"\"; echo \"🚀 Node.js Driver Processes:\"; ps aux | grep -E \"(node.*driver)\" | grep -v grep | while read line; do echo \"  $line\"; done; echo \"\"; echo \"⚙️  Compiled Driver Executables:\"; ps aux | grep -E \"(.*Driver|.*driver)\" | grep -v grep | grep -v node | while read line; do echo \"  $line\"; done; echo \"\"; echo \"🌐 Network Ports (9000-9999):\"; lsof -iTCP:9000-9999 -sTCP:LISTEN 2>/dev/null | grep -v COMMAND | while read line; do echo \"  $line\"; done; echo \"\"; echo \"📁 Driver Directories:\"; if [ -d \"drivers\" ]; then for dir in drivers/*/; do if [ -d \"$dir\" ]; then name=$(basename \"$dir\"); if [ -f \"$dir/package.json\" ]; then echo \"  $name: Has package.json\"; else echo \"  $name: Missing package.json\"; fi; fi; done; fi; echo \"\"; echo \"📦 Compiled Driver Binaries:\"; if [ -d \"bin/drivers\" ]; then for dir in bin/drivers/*/; do if [ -d \"$dir\" ]; then name=$(basename \"$dir\"); exe_files=$(find \"$dir\" -name \"*.exe\" 2>/dev/null); if [ ! -z \"$exe_files\" ]; then echo \"  $name: $(basename $exe_files)\"; else echo \"  $name: No .exe found\"; fi; fi; done; else echo \"  No bin/drivers directory found\"; fi; echo \"\"; echo \"📋 Recent Logs:\"; if [ -d \"logs\" ]; then ls -la logs/*.log 2>/dev/null | head -3; else echo \"  No logs directory found\"; fi"
        platforms: [darwin, linux]

  # Run tasks
  run:
    desc: Run a feature file with Runix
    cmds:
      - ts-node src/index.ts run {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  run:example:
    desc: Run the example feature
    cmds:
      - ts-node src/index.ts run {{.SCENARIO_DIR}}/example.feature

  run:driver-example:
    desc: Run the example driver feature
    cmds:
      - ts-node src/index.ts run {{.SCENARIO_DIR}}/example-driver.feature

  run:driver-example:with-port:
    desc: Run the example driver feature with a specific port
    cmds:
      - task: run-with-port
        vars:
          PORT: "{{.PORT}}"
          FEATURE_PATH: scenarios/example-driver.feature
          DRIVER: example-driver
    requires:
      vars: [PORT]

  # Development tasks
  dev:
    desc: Run in development mode with auto-reload
    cmds:
      - ts-node-dev --respawn src/index.ts {{.CLI_ARGS}}

  # Development driver workflow
  dev-drivers:
    desc: Build drivers and run example scenarios
    cmds:
      - task: build-drivers
      - task: run:driver-example  # Documentation tasks
  docs:
    desc: Generate documentation
    cmds:
      - npm run docs

  # CI/CD tasks
  ci:
    desc: Run continuous integration tasks
    cmds:
      - task: clean
      - task: build
      - task: test:coverage

  # Setup and installation tasks
  setup:
    desc: Setup development environment
    cmds:
      - npm install
      - cmd: "powershell -Command \"if (!(Test-Path {{.REPORTS_DIR}})) { New-Item -ItemType Directory -Force -Path {{.REPORTS_DIR}} }\""
        platforms: [windows]
      - cmd: mkdir -p {{.REPORTS_DIR}}
        platforms: [darwin, linux]
      - cmd: "powershell -Command \"if (!(Test-Path logs)) { New-Item -ItemType Directory -Force -Path logs }\""
        platforms: [windows]
      - cmd: mkdir -p logs
        platforms: [darwin, linux]      
      - cmd: powershell -Command "if (!(Test-Path screenshots)) { New-Item -ItemType Directory -Force -Path screenshots }"
        platforms: [windows]
      - cmd: mkdir -p screenshots
        platforms: [darwin, linux]

  # Driver development workflow
  driver-dev:
    desc: Complete driver development workflow
    cmds:
      - task: create-driver
        vars: { CLI_ARGS: "{{.CLI_ARGS}}" }
      - echo "Installing dependencies for {{.CLI_ARGS}} driver..."
      - cmd: powershell -Command "Push-Location {{.DRIVERS_DIR}}/{{.CLI_ARGS}} && npm install && Pop-Location"
        platforms: [windows]
      - cmd: cd {{.DRIVERS_DIR}}/{{.CLI_ARGS}} && npm install && cd -
        platforms: [darwin, linux]
      - echo "Testing {{.CLI_ARGS}} driver..."
      - task: test-driver
        vars: { CLI_ARGS: "{{.DRIVERS_DIR}}/{{.CLI_ARGS}}" }
    requires:
      vars: [CLI_ARGS]

  # Quick start for new users
  quickstart:
    desc: "Runs the full quickstart process: setup, build, and run comprehensive examples"
    deps: [setup, build, verify-drivers]
    cmds:
      - echo "Starting Runix quickstart process"
      - echo "All components built successfully!"
      - echo ""
      - echo "🚀 Running basic demonstration..."
      - echo "📋 Testing with example driver first"
      - echo ""
      - echo "1️⃣  Running basic example scenario"
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.exe run tests\fixtures\example-driver.feature --driver=example-driver"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run tests/fixtures/example-driver.feature --driver=example-driver
        platforms: [darwin, linux]
      - echo ""
      - echo "🎉 Quickstart complete! Basic functionality verified."
      - echo "📊 Check runix-report.json for detailed results"
      - echo "📁 Check {{.LOG_DIR}} for execution logs"

  quickstart:debug:
    desc: Setup and debug example with verbose logging
    cmds:
      - echo "Starting Runix debug quickstart"
      - task: setup
      - task: build
      - task: verify-drivers
      - echo "Running in debug mode with full logging"
      - cmd: 'cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_LOG_LEVEL=DEBUG&& set RUNIX_LOG_CONSOLE=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\example-driver.feature --driver=example-driver --driverConfig={\"timeout\":30000}"'
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_LOG_LEVEL=DEBUG RUNIX_LOG_CONSOLE=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/example-driver.feature --driver=example-driver --driverConfig='{\"timeout\":30000}'
        platforms: [darwin, linux]
  quickstart-simple:
    desc: "Quick demonstration of Runix with example driver"
    deps: [build]
    cmds:
      - echo "🚀 Starting Runix Quick Demo..."
      - echo "📋 This will run a simple test with the example driver"
      - cmd: |
          set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR={{.ROOT_DIR}}\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\example-driver.feature --driver=example-driver
        platforms: [windows]
      - cmd: |
          RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR={{.ROOT_DIR}}/bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/example-driver.feature --driver=example-driver
        platforms: [linux, darwin]
      - echo "✅ Quick demo complete!"

  quickstart-web:
    desc: "Quick demonstration of Runix with web driver"
    deps: [build]
    cmds:
      - echo "🌐 Starting Runix Web Driver Quick Demo..."
      - echo "📋 This will run web automation tests"
      - echo "🖼️  Screenshots will be saved to {{.SCREENSHOT_DIR}}/ directory"
      - cmd: |
          set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR={{.ROOT_DIR}}\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-comprehensive-demo.feature --driver=web-driver --driverConfig="{\"headless\":false,\"timeout\":15000,\"screenshotDir\":\"{{.SCREENSHOT_DIR}}\"}"
        platforms: [windows]
      - cmd: |
          RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR={{.ROOT_DIR}}/bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-comprehensive-demo.feature --driver=web-driver --driverConfig='{"headless":false,"timeout":15000,"screenshotDir":"{{.SCREENSHOT_DIR}}"}'
        platforms: [linux, darwin]
      - echo "✅ Web driver demo complete!"
      - echo "📊 Check reports/runix-report.html for detailed results"
      - echo "🖼️  Check {{.SCREENSHOT_DIR}}/ directory for visual proof"
  quickstart:web-showcase:
    desc: "Comprehensive web driver showcase - build and run multiple web scenarios"
    deps: [setup, build, verify-drivers]
    cmds:
      - echo "🚀 Starting Runix Web Driver Showcase..."
      - echo "✅ All drivers built successfully"
      - echo ""
      - echo "🌐 Running comprehensive web automation demo..."
      - echo "📋 This will demonstrate:"
      - echo "   - Browser automation (both headless and visible modes)"
      - echo "   - Form interactions and input handling"
      - echo "   - Element verification and assertions"
      - echo "   - Screenshot capture"
      - echo "   - Advanced web interactions"
      - echo ""
      - echo "⏱️  Starting in 3 seconds..."
      - cmd: timeout /t 3 >nul
        platforms: [windows]
      - cmd: sleep 3
        platforms: [linux, darwin]
      - echo ""
      - echo "🎬 Running basic web test scenario..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-test.feature --driver=web-driver"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-test.feature --driver=web-driver
        platforms: [darwin, linux]
      - echo ""
      - echo "🎭 Running comprehensive web demo..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-comprehensive-demo.feature --driver=web-driver"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-comprehensive-demo.feature --driver=web-driver
        platforms: [darwin, linux]
      - echo ""
      - echo "🎪 Running advanced web showcase..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-showcase.feature --driver=web-driver"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-showcase.feature --driver=web-driver
        platforms: [darwin, linux]
      - echo ""
      - echo "📊 Web showcase completed!"
      - echo "📁 Check runix-report.json for detailed results"
      - echo "📁 Check {{.LOG_DIR}} for execution logs"
      - echo "📸 Screenshots saved in {{.SCREENSHOT_DIR}} directory"
      - echo ""
      - echo "🎉 Welcome to Runix web automation! You're ready to automate any website!"

  fix-firewall:
    desc: "Fix Windows Firewall rules for Node.js drivers"
    cmds:
      - cmd: |
          echo "🔥 Checking and fixing Windows Firewall rules for Node.js..."
          netsh advfirewall firewall delete rule name="Node.js: Server-side JavaScript" >nul 2>&1
          netsh advfirewall firewall delete rule name="Node.js" >nul 2>&1
          netsh advfirewall firewall add rule name="Node.js: Server-side JavaScript" dir=in action=allow program="%ProgramFiles%\nodejs\node.exe" enable=yes
          netsh advfirewall firewall add rule name="Node.js: Server-side JavaScript" dir=out action=allow program="%ProgramFiles%\nodejs\node.exe" enable=yes
          echo "✅ Firewall rules updated!"
        platforms: [windows]
      - cmd: echo "ℹ️  Firewall configuration not needed on this platform"
        platforms: [darwin, linux]

  quickstart-with-firewall-fix:
    desc: "Quickstart with automatic firewall fix"
    cmds:
      - echo "🔧 Ensuring Node.js firewall permissions..."
      - task: fix-firewall
      - echo "🚀 Starting quickstart..."
      - task: quickstart  # Testing commands
  test-npm:
    desc: Run npm test command directly
    cmds:
      - npm test

  test:unit:
    desc: Run unit tests only
    cmds:
      - npm test -- --testPathPattern=tests/unit

  test:integration:
    desc: Run integration tests only
    cmds:
      - npm test -- --testPathPattern=tests/integration

  test:e2e:
    desc: Run end-to-end tests only
    cmds:
      - npm test -- --testPathPattern=tests/e2e

  test:coverage:
    desc: Run all tests with coverage report
    cmds:
      - npm test -- --coverage

  test:watch:
    desc: Run tests in watch mode
    cmds:
      - npm test -- --watch

  test:driver:
    desc: Test a specific driver
    cmds:
      - node scripts/test-driver.js {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  test:ai-driver:
    desc: Test AI driver specifically
    cmds:
      - npm test -- --testPathPattern=ai

  test:web-driver:
    desc: Test web driver specifically (requires browser)
    cmds:
      - npm test -- --testPathPattern=web

  # Comprehensive test tasks
  test:
    desc: "Run all test suites"
    cmds:
      - task: test-unit
      - task: test-integration
      - task: test-e2e
      - task: test-coverage
      - task: test-drivers
      - task: test-scenarios

  test-unit:
    desc: "Run unit tests"
    cmds:
      - npm test -- --testPathPattern="tests/unit" --verbose

  test-integration:
    desc: "Run integration tests"
    cmds:
      - npm test -- --testPathPattern="tests/integration" --verbose

  test-e2e:
    desc: "Run end-to-end tests"
    cmds:
      - npm test -- --testPathPattern="tests/e2e" --verbose

  test-watch:
    desc: "Run tests in watch mode"
    cmds:
      - npm test -- --watch

  test-coverage:
    desc: "Run tests with coverage report"
    cmds:
      - npm test -- --coverage

  # Driver Testing
  test-drivers:
    desc: "Test all drivers"
    cmds:
      - task: test-example-driver
      - task: test-web-driver
      - task: test-system-driver
      - task: test-vision-driver
      - task: test-ai-driver

  test-example-driver:
    desc: "Test example driver"
    cmds:
      - npm test -- --testPathPattern="example.*driver" --verbose

  test-web-driver:
    desc: "Test web driver"
    cmds:
      - npm test -- --testPathPattern="web.*driver" --verbose

  test-system-driver:
    desc: "Test system driver"
    cmds:
      - npm test -- --testPathPattern="system.*driver" --verbose

  test-vision-driver:
    desc: "Test vision driver"
    cmds:
      - npm test -- --testPathPattern="vision.*driver" --verbose

  test-ai-driver:
    desc: "Test AI driver"
    cmds:
      - npm test -- --testPathPattern="ai.*driver" --verbose

  # Feature Testing
  test-scenarios:
    desc: "Run all feature scenarios"
    cmds:
      - task: test-example-scenarios
      - task: test-web-scenarios
      - task: test-comprehensive-scenarios

  test-example-scenarios:
    desc: "Run example driver scenarios"
    cmds:
      - node dist/index.js run tests/scenarios/example-driver.feature --reporter=detailed
      - node dist/index.js run tests/scenarios/example-driver-comprehensive.feature --reporter=detailed

  test-web-scenarios:
    desc: "Run web automation scenarios"
    cmds:
      - node dist/index.js run tests/scenarios/web-test.feature --reporter=detailed
      - node dist/index.js run tests/scenarios/web-comprehensive.feature --reporter=detailed

  test-comprehensive-scenarios:
    desc: "Run comprehensive test scenarios"
    cmds:
      - node dist/index.js run tests/scenarios/web-comprehensive-demo.feature --reporter=detailed
      - node dist/index.js run tests/scenarios/web-showcase.feature --reporter=detailed

  test-showcase:
    desc: "Run impressive showcase scenarios"
    cmds:
      - node dist/index.js run tests/scenarios/web-showcase.feature --tags=@showcase --reporter=detailed
      - node dist/index.js run tests/scenarios/web-advanced-features.feature --tags=@demo --reporter=detailed

  # Performance Testing
  test-performance:
    desc: "Run performance tests"
    cmds:
      - npm test -- --testPathPattern="performance" --verbose --testTimeout=60000

  # Continuous Integration Testing
  test-ci:
    desc: "Run CI test suite"
    cmds:
      - task: build
      - task: test-unit
      - task: test-integration
      - task: test-drivers
      - task: test-coverage

  # Development Testing
  test-dev:
    desc: "Run development test suite (faster)"
    cmds:
      - npm test -- --testPathPattern="unit|integration" --verbose --bail

  test-quick:
    desc: "Run quick smoke tests"
    cmds:
      - npm test -- --testPathPattern="unit" --testNamePattern="smoke|basic" --verbose

  # Specific Test Categories
  test-engine:
    desc: "Test core engine functionality"
    cmds:
      - npm test -- --testPathPattern="engine" --verbose

  test-parser:
    desc: "Test Gherkin parser"
    cmds:
      - npm test -- --testPathPattern="parser" --verbose

  test-registry:
    desc: "Test driver registry"
    cmds:
      - npm test -- --testPathPattern="registry" --verbose

  # Debugging Tests
  test-debug:
    desc: "Run tests with debugging enabled"
    cmds:
      - npm test -- --verbose --detectOpenHandles --forceExit

  test-specific:
    desc: "Run specific test file (use: task test-specific TEST_FILE=path/to/test.js)"
    cmds:
      - npm test -- {{.TEST_FILE}} --verbose

  # Clean and Reset
  clean-tests:
    desc: "Clean test artifacts"
    cmds:
      - rm -rf coverage/
      - rm -rf test-results/
      - rm -rf screenshots/
      - rm -rf reports/
      - rm -rf logs/test-*.log

  # Setup Test Environment
  setup-test-env:
    desc: "Setup test environment"
    cmds:
      - mkdir -p logs
      - mkdir -p reports
      - mkdir -p screenshots
      - mkdir -p test-results

  # Run Tests with Different Configurations
  test-headless:
    desc: "Run web tests in headless mode"
    env:
      HEADLESS: "true"
    cmds:
      - task: test-web-scenarios
  test-ui:
    desc: "Run web tests with visible browser"
    env:
      HEADLESS: "false"
    cmds:
      - task: test-web-scenarios

  # Utility Tasks
  validate:
    desc: "Validate project setup"
    cmds:
      - node dist/index.js validate

  lint:
    desc: "Run linter"
    cmds:
      - npm run lint

  format:
    desc: "Format code"
    cmds:
      - npm run format

  # Documentation Tasks
  docs:
    desc: "Generate documentation"
    cmds:
      - npm run docs
  help:
    desc: "Show detailed help"
    cmds:
      - echo "Runix Task Runner"
      - echo "================"
      - echo ""
      - echo "Main Tasks:"
      - echo "  install       - Install all dependencies"
      - echo "  build         - Build project and drivers"
      - echo "  test          - Run all tests"
      - echo "  test-ci       - Run CI test suite"
      - echo ""
      - echo "Development:"
      - echo "  test-dev      - Quick development tests"
      - echo "  test-watch    - Watch mode testing"
      - echo "  dev           - Development mode"
      - echo ""
      - echo "Specific Testing:"
      - echo "  test-drivers  - Test all drivers"
      - echo "  test-scenarios- Run feature scenarios"
      - echo "  test-showcase - Run demo scenarios"
      - echo ""
      - echo "Use 'task --list' for all available tasks"  
  emergency-cleanup:
    desc: Emergency cleanup of all Runix processes using DriverProcessManager (use when normal shutdown fails)
    cmds:
      - cmd: "powershell -Command \"Write-Host '🚨 EMERGENCY CLEANUP: Using DriverProcessManager for safe cleanup...' -ForegroundColor Red; try { \\$result = node -e \\\"const { DriverProcessManager } = require('./dist/drivers/management/DriverProcessManager'); const manager = DriverProcessManager.getInstance(); manager.emergencyCleanup().then(() => console.log('✅ Emergency cleanup completed successfully')).catch(e => console.error('❌ Cleanup error:', e.message));\\\" 2>&1; Write-Host \\\"Cleanup result: \\$result\\\" -ForegroundColor Green } catch { Write-Host '❌ DriverProcessManager failed, using nuclear cleanup...' -ForegroundColor Red; \\$killed = 0; Write-Host '🎯 Targeting ALL Node.js processes with runix/driver in command line...'; \\$nodeProcesses = Get-Process -Name 'node' -ErrorAction SilentlyContinue | Where-Object { \\$_.CommandLine -like '*runix*' -or \\$_.CommandLine -like '*driver*' }; if (\\$nodeProcesses) { \\$nodeProcesses | ForEach-Object { Write-Host \\\"Force killing Node.js: \\$(\\$_.ProcessName) (PID: \\$(\\$_.Id))\\\" -ForegroundColor Red; Stop-Process -Id \\$_.Id -Force }; Write-Host '🎯 Targeting ALL executables on driver ports...'; \\$connections = Get-NetTCPConnection -State Listen -ErrorAction SilentlyContinue | Where-Object { \\$_.LocalPort -ge 9000 -and \\$_.LocalPort -le 9999 }; if (\\$connections) { \\$connections | ForEach-Object { \\$process = Get-Process -Id \\$_.OwningProcess -ErrorAction SilentlyContinue; if (\\$process) { Write-Host \\\"Force killing process on port \\$(\\$_.LocalPort): \\$(\\$process.ProcessName) (PID: \\$(\\$process.Id))\\\" -ForegroundColor Red; Stop-Process -Id \\$process.Id -Force; \\$killed++ } }; Write-Host \\\"Nuclear cleanup completed. Terminated \\$killed processes.\\\" -ForegroundColor Green }\""
        platforms: [windows]
      - cmd: "echo \"🚨 EMERGENCY CLEANUP: Using DriverProcessManager for safe cleanup...\"; if [ -f \"dist/drivers/management/DriverProcessManager.js\" ]; then node -e \"const { DriverProcessManager } = require('./dist/drivers/management/DriverProcessManager'); const manager = DriverProcessManager.getInstance(); manager.emergencyCleanup().then(() => console.log('✅ Emergency cleanup completed successfully')).catch(e => console.error('❌ Cleanup error:', e.message));\" 2>&1; else echo \"❌ DriverProcessManager not found, using nuclear cleanup...\"; killed=0; echo \"🎯 Targeting ALL Node.js processes with runix/driver...\"; ps aux | grep -E \"(node.*runix|node.*driver)\" | grep -v grep | while read line; do pid=$(echo $line | awk '{print $2}'); echo \"Force killing Node.js: PID $pid\"; kill -9 $pid 2>/dev/null && killed=$((killed+1)); done; echo \"🎯 Targeting ALL processes on driver ports...\"; lsof -iTCP:9000-9999 -sTCP:LISTEN 2>/dev/null | while read line; do pid=$(echo $line | awk '{print $2}'); if [ ! -z \"$pid\" ] && [ \"$pid\" != \"PID\" ]; then echo \"Force killing process on driver port: PID $pid\"; kill -9 $pid 2>/dev/null && killed=$((killed+1)); fi; done; echo \"Nuclear cleanup completed. Terminated processes.\"; fi"
        platforms: [darwin, linux]
