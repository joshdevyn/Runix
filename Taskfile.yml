version: '3'

vars:
  DIST_DIR: dist
  REPORTS_DIR: reports
  DRIVERS_DIR: drivers
  BIN_DIR: bin
  BINARY_DIR: 'bin/runix'
  ROOT_DIR: '{{.PWD}}'
  SCENARIO_DIR: tests/scenarios
  LOG_DIR: logs
  SCREENSHOT_DIR: screenshots

tasks:
  default:
    desc: "Default task: Runs the full quickstart process (setup, build-all, verify-drivers, run example)."
    cmds:
      - task: quickstart

  # Build tasks
  build:
    desc: Build the Runix project
    cmds:
      - npm run build
      - cmd: powershell -Command "if (Test-Path .env) { Copy-Item .env {{.DIST_DIR}}/ -Force }"
        platforms: [windows]
      - cmd: if [ -f .env ]; then cp .env {{.DIST_DIR}}/; fi
        platforms: [darwin, linux]
    sources:
      - src/**/*.ts
    generates:
      - "{{.DIST_DIR}}/**/*.js"

  clean:
    desc: Clean build artifacts
    cmds:
      - cmd: powershell -Command "if (Test-Path {{.DIST_DIR}}) { Remove-Item -Recurse -Force {{.DIST_DIR}} }"
        platforms: [windows]
      - cmd: rm -rf {{.DIST_DIR}}
        platforms: [darwin, linux]
      - cmd: powershell -Command "if (Test-Path {{.REPORTS_DIR}}) { Remove-Item -Recurse -Force {{.REPORTS_DIR}} }"
        platforms: [windows]
      - cmd: rm -rf {{.REPORTS_DIR}}
        platforms: [darwin, linux]
      - cmd: powershell -Command "if (Test-Path coverage) { Remove-Item -Recurse -Force coverage }"
        platforms: [windows]
      - cmd: rm -rf coverage
        platforms: [darwin, linux]

  bundle:
    desc: Bundle the project into executables
    deps: [build]
    cmds:
      - npm run bundle

  # Complete build solution
  build-all:
    desc: Build Runix binary and all example drivers
    cmds:
      - task: bundle
      # Create directories
      - cmd: powershell -Command "New-Item -ItemType Directory -Force -Path {{.BIN_DIR}} | Out-Null"
        platforms: [windows]
      - cmd: powershell -Command "New-Item -ItemType Directory -Force -Path {{.BIN_DIR}}/drivers | Out-Null"
        platforms: [windows]
      - cmd: mkdir -p {{.BIN_DIR}} {{.BIN_DIR}}/drivers
        platforms: [darwin, linux]
      # Create the runix executable
      - cmd: powershell -Command "npm run build-binaries"
        platforms: [windows]
      - cmd: npm run build-binaries
        platforms: [darwin, linux]
      # Build the drivers as executables
      - task: build-drivers

  build-drivers:
    desc: Build and install all example drivers as executables
    cmds:
      - echo "Building driver executables..."
      # Build the example driver in its own directory first
      - task: build-example-driver
      # Build the web driver
      - task: build-web-driver
      # Ensure the driver directory exists in bin directory (Windows)
      - cmd: powershell -Command "New-Item -ItemType Directory -Force -Path {{.BIN_DIR}}/drivers/example-driver | Out-Null"
        platforms: [windows]
      # Copy the built executable and necessary files to bin directory (Windows)
      - cmd: powershell -Command "if (Test-Path {{.DRIVERS_DIR}}/example-driver/ExampleDriver.exe) { Copy-Item {{.DRIVERS_DIR}}/example-driver/ExampleDriver.exe {{.BIN_DIR}}/drivers/example-driver/ -Force }"
        platforms: [windows]
      - cmd: powershell -Command "if (Test-Path {{.DRIVERS_DIR}}/example-driver/driver.json) { Copy-Item {{.DRIVERS_DIR}}/example-driver/driver.json {{.BIN_DIR}}/drivers/example-driver/ -Force }"
        platforms: [windows]
      
      # Web driver installation (Windows)
      - cmd: powershell -Command "New-Item -ItemType Directory -Force -Path {{.BIN_DIR}}/drivers/web-driver | Out-Null"
        platforms: [windows]
      - cmd: powershell -Command "Copy-Item {{.DRIVERS_DIR}}/web-driver/WebDriver.exe {{.BIN_DIR}}/drivers/web-driver/ -Force"
        platforms: [windows]
      - cmd: powershell -Command "Copy-Item {{.DRIVERS_DIR}}/web-driver/driver.json {{.BIN_DIR}}/drivers/web-driver/ -Force"
        platforms: [windows]
      
      # Ensure the driver directory exists in bin directory (Darwin/Linux)
      - cmd: mkdir -p {{.BIN_DIR}}/drivers/example-driver
        platforms: [darwin, linux]
      # Copy the built executable and necessary files to bin directory (Darwin/Linux)
      # Note: 'ExampleDriver' is the non-Windows executable name produced by build.js
      - cmd: cp {{.DRIVERS_DIR}}/example-driver/ExampleDriver {{.BIN_DIR}}/drivers/example-driver/ExampleDriver
        platforms: [darwin, linux]
      - cmd: cp {{.DRIVERS_DIR}}/example-driver/driver.json {{.BIN_DIR}}/drivers/example-driver/driver.json
        platforms: [darwin, linux]

      # Web driver installation (Darwin/Linux)
      - cmd: mkdir -p {{.BIN_DIR}}/drivers/web-driver
        platforms: [darwin, linux]
      - cmd: cp {{.DRIVERS_DIR}}/web-driver/WebDriver {{.BIN_DIR}}/drivers/web-driver/WebDriver
        platforms: [darwin, linux]
      - cmd: cp {{.DRIVERS_DIR}}/web-driver/driver.json {{.BIN_DIR}}/drivers/web-driver/driver.json
        platforms: [darwin, linux]

      # Generic script for other drivers or further processing (if any)
      - cmd: bash scripts/build-drivers.sh {{.DRIVERS_DIR}} {{.BIN_DIR}}
        platforms: [darwin, linux]
      - echo "All driver executables built and installed"

  build-example-driver:
    desc: Build only the example driver executable
    cmds:
      - echo "Building example driver in {{.DRIVERS_DIR}}/example-driver"
      - cmd: powershell -Command "Push-Location {{.DRIVERS_DIR}}/example-driver; npm install; npm run build; Pop-Location"
        platforms: [windows]
      - cmd: cd {{.DRIVERS_DIR}}/example-driver && npm install && npm run build && cd -
        platforms: [darwin, linux]

  build-web-driver:
    desc: Build only the web driver executable
    cmds:
      - echo "Building web driver in {{.DRIVERS_DIR}}/web-driver"
      - cmd: powershell -Command "Push-Location {{.DRIVERS_DIR}}/web-driver; if (!(Test-Path package.json)) { npm init -y }; npm install playwright ws --omit=dev; npm run build; Pop-Location"
        platforms: [windows]
      - cmd: cd {{.DRIVERS_DIR}}/web-driver && if [ ! -f package.json ]; then npm init -y; fi && npm install playwright ws --omit=dev && npm run build && cd -
        platforms: [darwin, linux]

  # Test tasks
  test:
    desc: Run all tests
    cmds:
      - jest

  test:unit:
    desc: Run unit tests
    cmds:
      - jest --testPathPattern=tests/unit

  test:integration:
    desc: Run integration tests
    cmds:
      - jest --testPathPattern=tests/integration

  test:e2e:
    desc: Run end-to-end tests
    cmds:
      - jest --testPathPattern=tests/e2e
      
  test:coverage:
    desc: Run tests with coverage
    cmds:
      - jest --coverage

  verify-drivers:
    desc: Verify that drivers are correctly installed and accessible
    cmds:
      - echo "Verifying drivers..."
      - cmd: npx ts-node src/drivers/driverRegistry.ts verify
        platforms: [windows, darwin, linux]

  import-steps:
    desc: Import and register all driver steps
    cmds:
      - echo "Importing driver steps..."
      - cmd: powershell -Command "if (Test-Path scripts/import-driver-steps.js) { node scripts/import-driver-steps.js } else { echo 'Warning Could not import steps' }"
        platforms: [windows]
      - cmd: bash -c "if [ -f scripts/import-driver-steps.js ]; then node scripts/import-driver-steps.js; else echo 'Warning Could not import steps'; fi"
        platforms: [darwin, linux]

  run-with-port:
    desc: Run a feature file with a specific port
    cmds:
      - cmd: $env:RUNIX_DRIVER_PORT="{{.PORT}}"; ts-node src/index.ts run {{.FEATURE_PATH}} --driver={{.DRIVER}}
        platforms: [windows]
      - cmd: RUNIX_DRIVER_PORT={{.PORT}} ts-node src/index.ts run {{.FEATURE_PATH}} --driver={{.DRIVER}}
        platforms: [darwin, linux]
    requires:
      vars: [PORT, FEATURE_PATH, DRIVER]

  # Driver tasks
  create-driver:
    desc: Create a new driver scaffold
    cmds:
      - node scripts/create-driver.js {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  test-driver:
    desc: Test a specific driver
    cmds:
      - node scripts/test-driver.js {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  list-drivers:
    desc: List all available drivers
    cmds:
      - ts-node src/index.ts list-drivers

  # Run tasks
  run:
    desc: Run a feature file with Runix
    cmds:
      - ts-node src/index.ts run {{.CLI_ARGS}}
    requires:
      vars: [CLI_ARGS]

  run:example:
    desc: Run the example feature
    cmds:
      - ts-node src/index.ts run {{.SCENARIO_DIR}}/example.feature

  run:driver-example:
    desc: Run the example driver feature
    cmds:
      - ts-node src/index.ts run {{.SCENARIO_DIR}}/example-driver.feature

  run:driver-example:with-port:
    desc: Run the example driver feature with a specific port
    cmds:
      - task: run-with-port
        vars:
          PORT: "{{.PORT}}"
          FEATURE_PATH: scenarios/example-driver.feature
          DRIVER: example-driver
    requires:
      vars: [PORT]

  # Development tasks
  dev:
    desc: Run in development mode with auto-reload
    cmds:
      - ts-node-dev --respawn src/index.ts {{.CLI_ARGS}}

  # Development driver workflow
  dev-drivers:
    desc: Build drivers and run example scenarios
    cmds:
      - task: build-drivers
      - task: run:driver-example

  # Documentation tasks
  docs:
    desc: Generate documentation
    cmds:
      - echo "Documentation generation not implemented yet"

  # CI/CD tasks
  ci:
    desc: Run continuous integration tasks
    cmds:
      - task: clean
      - task: build
      - task: test:coverage
      - task: bundle

  # Setup and installation tasks
  setup:
    desc: Setup development environment
    cmds:
      - npm install
      - cmd: powershell -Command "if (!(Test-Path {{.REPORTS_DIR}})) { New-Item -ItemType Directory -Force -Path {{.REPORTS_DIR}} }"
        platforms: [windows]
      - cmd: mkdir -p {{.REPORTS_DIR}}
        platforms: [darwin, linux]
      - cmd: powershell -Command "if (!(Test-Path logs)) { New-Item -ItemType Directory -Force -Path logs }"
        platforms: [windows]
      - cmd: mkdir -p logs
        platforms: [darwin, linux]
      - cmd: powershell -Command "if (!(Test-Path screenshots)) { New-Item -ItemType Directory -Force -Path screenshots }"
        platforms: [windows]
      - cmd: mkdir -p screenshots
        platforms: [darwin, linux]

  # Driver development workflow
  driver:dev:
    desc: Complete driver development workflow
    cmds:
      - task: create-driver
        vars: { CLI_ARGS: "{{.CLI_ARGS}}" }
      - echo "Installing dependencies for {{.CLI_ARGS}} driver..."
      - cmd: powershell -Command "Push-Location {{.DRIVERS_DIR}}/{{.CLI_ARGS}} && npm install && Pop-Location"
        platforms: [windows]
      - cmd: cd {{.DRIVERS_DIR}}/{{.CLI_ARGS}} && npm install && cd -
        platforms: [darwin, linux]
      - echo "Testing {{.CLI_ARGS}} driver..."
      - task: test-driver
        vars: { CLI_ARGS: "{{.DRIVERS_DIR}}/{{.CLI_ARGS}}" }
    requires:
      vars: [CLI_ARGS]

  # Quick start for new users
  quickstart:
    desc: "Runs the full quickstart process: setup, build, and run comprehensive examples"
    deps: [setup, build-all, verify-drivers]
    cmds:
      - echo "Starting Runix quickstart process"
      - echo "All components built successfully!"
      - echo ""
      - echo "🚀 Running comprehensive demonstration..."
      - echo "📋 This includes microservices, web automation, system operations, vision processing, and AI orchestration examples"
      - echo ""
      - echo "1️⃣  Running example scenario with microservices architecture"
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_PORT=8090&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run tests/scenarios\example-driver-comprehensive.feature --driver=example-driver --driverConfig={\"timeout\":30000}"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_PORT=8090 RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run tests/scenarios/example-driver-comprehensive.feature --driver=example-driver --driverConfig='{\"timeout\":30000}'
        platforms: [darwin, linux]
      - echo ""
      - echo "2️⃣  Running comprehensive web automation demo..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run tests/scenarios\web-comprehensive-demo.feature --driver=web-driver --driverConfig={\"headless\":false,\"screenshotDir\":\"screenshots\"}"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run tests/scenarios/web-comprehensive-demo.feature --driver=web-driver --driverConfig='{\"headless\":false,\"screenshotDir\":\"screenshots\"}'
        platforms: [darwin, linux]
      - echo ""
      - echo "3️⃣  Running system driver operations demo..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run tests/scenarios\system-driver-comprehensive.feature --driver=system-driver --driverConfig={\"workingDirectory\":\".\"}"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run tests/scenarios/system-driver-comprehensive.feature --driver=system-driver --driverConfig='{\"workingDirectory\":\".\"}'
        platforms: [darwin, linux]
      - echo ""
      - echo "4️⃣  Running vision driver processing demo..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run tests/scenarios\vision-driver-comprehensive.feature --driver=vision-driver --driverConfig={\"confidenceThreshold\":0.7}"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run tests/scenarios/vision-driver-comprehensive.feature --driver=vision-driver --driverConfig='{\"confidenceThreshold\":0.7}'
        platforms: [darwin, linux]
      - echo ""
      - echo "5️⃣  Running AI driver orchestration demo..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run tests/scenarios\ai-driver-comprehensive.feature --driver=ai-driver --driverConfig={\"model\":\"gpt-4\"}"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run tests/scenarios/ai-driver-comprehensive.feature --driver=ai-driver --driverConfig='{\"model\":\"gpt-4\"}'
        platforms: [darwin, linux]
      - echo ""
      - echo "🎉 Quickstart complete! You've seen microservices, web automation, system operations, vision processing, and AI orchestration in action."
      - echo "📊 Check runix-report.json for detailed results"
      - echo "📁 Check {{.LOG_DIR}} for execution logs"
      - echo "📸 Screenshots saved in screenshots/ directory"
      - echo "🤖 AI orchestration capabilities demonstrated"
      - echo "👁️  Computer vision processing showcased"
      - echo "⚙️  System operations automated"

  quickstart:debug:
    desc: Setup and debug example with verbose logging
    cmds:
      - echo "Starting Runix debug quickstart"
      - task: setup
      - task: build-all
      - task: verify-drivers
      - echo "Running in debug mode with full logging"
      - cmd: 'cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_LOG_LEVEL=DEBUG&& set RUNIX_LOG_CONSOLE=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\example-driver.feature --driver=example-driver --driverConfig={\"timeout\":30000}"'
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_LOG_LEVEL=DEBUG RUNIX_LOG_CONSOLE=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/example-driver.feature --driver=example-driver --driverConfig='{\"timeout\":30000}'
        platforms: [darwin, linux]

  quickstart-simple:
    desc: "Quick demonstration of Runix with example driver"
    deps: [build-all]
    cmds:
      - echo "🚀 Starting Runix Quick Demo..."
      - echo "📋 This will run a simple test with the example driver"
      - cmd: |
          set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR={{.ROOT_DIR}}\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\example-driver.feature --driver=example-driver
        platforms: [windows]
      - cmd: |
          RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR={{.ROOT_DIR}}/bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/example-driver.feature --driver=example-driver
        platforms: [linux, darwin]
      - echo "✅ Quick demo complete!"

  quickstart-web:
    desc: "Quick demonstration of Runix with web driver"
    deps: [build-all]
    cmds:
      - echo "🌐 Starting Runix Web Driver Quick Demo..."
      - echo "📋 This will run web automation tests"
      - echo "🖼️  Screenshots will be saved to {{.SCREENSHOT_DIR}}/ directory"
      - cmd: |
          set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR={{.ROOT_DIR}}\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-comprehensive-demo.feature --driver=web-driver --driverConfig="{\"headless\":false,\"timeout\":15000,\"screenshotDir\":\"{{.SCREENSHOT_DIR}}\"}"
        platforms: [windows]
      - cmd: |
          RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR={{.ROOT_DIR}}/bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-comprehensive-demo.feature --driver=web-driver --driverConfig='{"headless":false,"timeout":15000,"screenshotDir":"{{.SCREENSHOT_DIR}}"}'
        platforms: [linux, darwin]
      - echo "✅ Web driver demo complete!"
      - echo "📊 Check reports/runix-report.html for detailed results"
      - echo "🖼️  Check {{.SCREENSHOT_DIR}}/ directory for visual proof"

  quickstart:web-showcase:
    desc: "Comprehensive web driver showcase - build and run multiple web scenarios"
    deps: [setup, build-all, verify-drivers]
    cmds:
      - echo "🚀 Starting Runix Web Driver Showcase..."
      - echo "✅ All drivers built successfully"
      - echo ""
      - echo "🌐 Running comprehensive web automation demo..."
      - echo "📋 This will demonstrate:"
      - echo "   - Browser automation (both headless and visible modes)"
      - echo "   - Form interactions and input handling"
      - echo "   - Element verification and assertions"
      - echo "   - Screenshot capture"
      - echo "   - Advanced web interactions"
      - echo ""
      - echo "⏱️  Starting in 3 seconds..."
      - cmd: timeout /t 3 >nul
        platforms: [windows]
      - cmd: sleep 3
        platforms: [linux, darwin]
      - echo ""
      - echo "🎬 Running basic web test scenario..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-test.feature --driver=web-driver"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-test.feature --driver=web-driver
        platforms: [darwin, linux]
      - echo ""
      - echo "🎭 Running comprehensive web demo..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-comprehensive-demo.feature --driver=web-driver"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-comprehensive-demo.feature --driver=web-driver
        platforms: [darwin, linux]
      - echo ""
      - echo "🎪 Running advanced web showcase..."
      - cmd: cmd /C "set RUNIX_LOG_SHOW_ORIGIN=true&& set RUNIX_DRIVER_DIR=%CD%\bin\drivers&& .\bin\runix.bat run {{.SCENARIO_DIR}}\web-showcase.feature --driver=web-driver"
        platforms: [windows]
      - cmd: RUNIX_LOG_SHOW_ORIGIN=true RUNIX_DRIVER_DIR=bin/drivers ./bin/runix run {{.SCENARIO_DIR}}/web-showcase.feature --driver=web-driver
        platforms: [darwin, linux]
      - echo ""
      - echo "📊 Web showcase completed!"
      - echo "📁 Check runix-report.json for detailed results"
      - echo "📁 Check {{.LOG_DIR}} for execution logs"
      - echo "📸 Screenshots saved in {{.SCREENSHOT_DIR}} directory"
      - echo ""
      - echo "🎉 Welcome to Runix web automation! You're ready to automate any website!"

  fix-firewall:
    desc: "Fix Windows Firewall rules for Node.js drivers"
    cmds:
      - cmd: |
          echo "🔥 Checking and fixing Windows Firewall rules for Node.js..."
          netsh advfirewall firewall delete rule name="Node.js: Server-side JavaScript" >nul 2>&1
          netsh advfirewall firewall delete rule name="Node.js" >nul 2>&1
          netsh advfirewall firewall add rule name="Node.js: Server-side JavaScript" dir=in action=allow program="%ProgramFiles%\nodejs\node.exe" enable=yes
          netsh advfirewall firewall add rule name="Node.js: Server-side JavaScript" dir=out action=allow program="%ProgramFiles%\nodejs\node.exe" enable=yes
          echo "✅ Firewall rules updated!"
        platforms: [windows]
      - cmd: echo "ℹ️  Firewall configuration not needed on this platform"
        platforms: [darwin, linux]

  quickstart-with-firewall-fix:
    desc: "Quickstart with automatic firewall fix"
    cmds:
      - echo "🔧 Ensuring Node.js firewall permissions..."
      - task: fix-firewall
      - echo "🚀 Starting quickstart..."
      - task: quickstart
